Linked List Program
-------------------------------------------------------------------------

package DSA;
class Node{
	public Object item;
	public Node next;
}

public class LinkedListImplementation {
	private int size;
	private Node head;
	
	public LinkedListImplementation() {
		this.size=0;
		this.head=null;
	}
	public void insertingnode(String i) {
		Node node=new Node();
		node.item=i;
		Node current=this.head;
		if(this.head==null) 
		{
			this.head=node;
			this.head.next=null;
			this.size=1;
			System.out.println(this.head.toString());
		}
		else
		{
			while(current.next!=null) {
				 current=current.next;
			}
			current.next=node;
			node.next=null;
			this.size+=1;
		}
	}
	public void addAtStarting(String i) {
		Node n=new Node();
		n.item=i;
		n.next=this.head;
		this.head=n;
	}
	public void addAtMiddle(String i,int pos) 
	{
		Node node=new Node();
		node.item=i;
		Node current=this.head;
		if(this.head!=null && pos<=this.size) 
		{
			for (int j=0;j<pos;j++) {
				current= current.next;
			}
			node.next=current.next;
			current.next=node;
			this.size+=1;
			
		}
	}
	public void deleteNode()
	{
		if(this.head==null) {
			System.out.println("Linked list is Empty");
			
		}
		else {
			this.head=head.next;
		}
	}
	public void deleteLastNode() {
		if(this.head==null) {
			System.out.println("There are no elements in the linked list");
		}
		else {
			Node current=this.head;
			while(current.next.next!=null) {
				current=current.next;
			}
			current.next=null;
			
		}
	}
	public void deleteAtMiddle(int pos) {
		if(this.head==null && pos>this.size) {
			System.out.println("Linked does not contain any elements");
		}
		else {
			Node current=this.head;
			for(int i=0;i<pos-1;i++) {
				current=current.next;
			}
			Node p=current.next;//the node that going to be deleted
			current.next=current.next.next;
			p.next=null;
		}
	}
public void deleteAtEnd() {
	Node current =this.head;
	if(this.head==null) {
		System.out.println("No nodes are present");
	}
	else {
		while(current.next!=null) {
			current=current.next;
			if(current.next.next==null)
				current.next=null;
		}
	}
}
public void find(int value) {
	Node current = this.head;
	boolean flag=false;
	for(int i=0;i<size;i++) {
		if (current.item.equals(value)) {
			System.out.println("Element present at index"+i);
			flag=true;
		}
		current=current.next;
	}
	if(!flag) {
		System.out.println("Element not present in Linked List");
	}
}
public void traverse() {
	if(this.head==null) {
		System.out.println("Linked list is empty");
	}
	Node current=this.head;
	System.out.println("The element is present in the linked list");
	for(int i=0;i<size;i++) {
		System.out.println(current.item+" ");
		current=current.next;
	}
	
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LinkedListImplementation llist = new LinkedListImplementation();
		llist.insertingnode("A");
		llist.insertingnode("B");
		llist.insertingnode("C");
		llist.insertingnode("D");
		llist.insertingnode("E");
		llist.traverse();
		llist.addAtStarting("Th");
		llist.traverse();
		llist.deleteAtEnd();
		

	}

}
